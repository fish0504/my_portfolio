{"version":3,"sources":["components/Profile.js","components/Skills.js","components/Products.js","components/App.js","serviceWorker.js","index.js"],"names":["Profile","className","Skills","Products","App","props","state","openNumber","this","setState","url","history","push","home","skill","about","onClick","clickProfile","clickSkills","clickProducts","style","display","icon","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAwBeA,EAtBD,WAEV,OACE,yBAAKC,UAAU,WACf,wBAAIA,UAAU,aAAd,QACA,wBAAIA,UAAU,WAAd,QAEA,wBAAIA,UAAU,gBAAd,cAEA,wDACA,qEAEA,yBAAKA,UAAU,WACf,oDACA,kFCeSC,EA7BF,WAGT,OACE,yBAAKD,UAAU,UAGf,wBAAIA,UAAU,SAAd,aACA,4CACA,sCACA,qFACA,sCACA,6GACA,sFACA,6DACA,kDACA,iDACA,yHAEA,4CACA,qCACA,+CCWSE,EAhCA,WAIX,OACE,yBAAKF,UAAU,YAEf,wBAAIA,UAAU,eAAd,YACA,wDACA,+CACI,uDACA,0EACA,kJACA,2IARJ,SASC,sFAEC,yHACA,wEACA,qIAEA,4CACA,2FACA,iI,eCyDOG,E,kDAjEX,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAM,CAACC,WAAW,GAHN,E,2DAOfC,KAAKC,SAAS,CAACF,WAAW,M,oCAG1BC,KAAKC,SAAS,CAACF,WAAW,M,sCAG1BC,KAAKC,SAAS,CAACF,WAAW,M,iCAGjBG,GACTF,KAAKH,MAAMM,QAAQC,KAAKF,K,+BAK3B,IAAD,OACMG,EAAK,kBAAC,EAAD,MACLC,EAAM,kBAAC,EAAD,MACNC,EAAM,kBAAC,EAAD,MAKV,OACA,yBAAKd,UAAU,QACb,yBAAKA,UAAU,aACb,4BAAQe,QAAS,WAAK,EAAKC,gBAAiBhB,UAAU,aAAtD,QACA,4BAAQe,QAAS,WAAK,EAAKE,eAAiBjB,UAAU,cAAtD,UACA,4BAAQe,QAAS,WAAK,EAAKG,iBAAkBlB,UAAU,gBAAvD,UAEF,yBAAKA,UAAU,YAGb,yBAAKmB,MAAO,CAACC,QAAgC,IAAxBb,KAAKF,MAAMC,WAAiB,OAAS,KAAOO,GACjE,yBAAKM,MAAO,CAACC,QAAgC,IAAxBb,KAAKF,MAAMC,WAAiB,OAAS,KAAOQ,GACjE,6BAAMF,GACN,yBAAKO,MAAO,CAACC,QAAgC,IAAxBb,KAAKF,MAAMC,WAAiB,OAAS,KAAOO,GACjE,yBAAKM,MAAO,CAACC,QAAgC,IAAxBb,KAAKF,MAAMC,WAAiB,OAAS,KAAOQ,IAGnE,kBAAC,IAAD,KACI,yBAAKd,UAAU,SACf,kBAAC,IAAD,CAAiBqB,KAAM,CAAC,MAAO,WAC/B,kBAAC,IAAD,CAAiBA,KAAM,CAAC,MAAO,eAC/B,kBAAC,IAAD,CAAiBA,KAAM,CAAC,MAAO,YAC/B,uBAAGrB,UAAU,mBAAmBsB,KAAK,+BAA8B,kBAAC,IAAD,CAAiBD,KAAK,iBAAzF,UACA,uBAAGrB,UAAU,oBAAoBsB,KAAK,iCAAtC,WACA,uBAAGtB,UAAU,oBAAoBsB,KAAK,qCAAtC,kB,GAxDMC,IAAMC,WCFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ca7262bb.chunk.js","sourcesContent":["import React from 'react';\n//import \"status1.png\";\nconst Profile=()=>{\n\n    return (\n      <div className=\"Profile\">\n      <h1 className=\"home_name\">home</h1>\n      <h2 className=\"my_name\">fish</h2>\n      \n      <h2 className=\"English name\">@fish0504_</h2>\n\n      <h3>広島大学</h3>\n      <p>工学部二類 4年</p>\n      \n      <div className=\"English\">\n      <h3>Hiroshima University</h3>\n      <p>Electrical Engineering and System Control Course</p>\n      </div>\n    </div>\n\n    );\n\n}\n\nexport default Profile;\n","import React from 'react';\n\nconst Skills=()=>{\n\n\n    return (\n      <div className=\"skills\">\n\n\n      <h1 className=\"title\">My Skills</h1>\n      <h2>資格</h2>\n      <a>2019.10</a>\n      <p>基本情報技術者試験</p>\n      <a>2019.12</a>\n      <p>PAST(アルゴリズム実技検定)中級</p>\n      <h2>競技プログラミング</h2>\n      <p>AtCoder緑(max-rating:1132)</p>\n      <h2>バイト</h2>\n      <p>2020.6月〜</p>\n      <p>画像処理関連コードの実装と検証</p>\n\n      <h2>語学</h2>\n      <a>2019.4</a>\n      <p>TOEIC(L&R) 850</p>\n\n      </div>\n\n    );\n\n}\n\nexport default Skills;\n","import React from 'react';\n//const Products:React.FC=()=>\nconst Products=()=>{\n\n\n\n    return (\n      <div className=\"Products\">\n\n      <h1 className=\"about_title\">About me</h1>\n      <h2>笠原拓海</h2>\n      <h2>Takumi kasahara</h2>\n          <p>広島大学</p>\n          <p>工学部二類　4年</p>\n          <p>大学3年までの間は自分の興味のある分野を</p>\n          <p>独学で勉強することに力を入れました。</p>\n      　<h3>最近興味があること</h3>\n        \n        <p>画像処理関連のバイトをしており</p>\n        <p>最近はVisual Studio,c++で</p>\n        <p>画像処理関連のコードを書いています</p>\n\n        <h4>趣味</h4>\n        <p>・競技プログラミング</p>\n        <p>・好きなバンドのライブに行くこと</p>\n\n\n      </div>\n\n    );\n  }\n\n\n\nexport default Products;\n","import React from 'react';\n//import { withRouter } from 'react-router';\n//import { Link } from \"react-router-dom\";\nimport Contentbox from './Contentbox';\n//import {View } from 'react-native';\n//import { Ionicons, FontAwesome } from \"@expo/vector-icons\";\n//import Icon from 'react-native-vector-icons/FontAwesome';\nimport Profile from './Profile';\nimport Skills from './Skills';\nimport Products from './Products';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\nclass App extends React.Component{\n\n    constructor(props) {\n      super(props);\n      // stateを定義してください\n      this.state={openNumber:0};\n\n    }\n      clickProfile(){\n        this.setState({openNumber:0});\n      }\n      clickSkills(){\n        this.setState({openNumber:1});\n      }\n      clickProducts(){\n        this.setState({openNumber:2});\n      }\n\n      moveToLink(url){\n        this.props.history.push(url);\n      }\n\n      \n    render()\n    {\n      let home=<Profile/>;\n      let skill=<Skills/>;\n      let about=<Products/>;\n      \n\n\n\n      return (\n      <div className=\"main\">\n        <div className=\"headlinks\">\n          <button onClick={()=>{this.clickProfile()}} className=\"btn about\">Home</button>\n          <button onClick={()=>{this.clickSkills()}}  className=\"btn Skills\">Skills</button>\n          <button onClick={()=>{this.clickProducts()}} className=\"btn products\">About</button>\n        </div>\n        <div className=\"contents\">\n\n          \n          <div style={{display:this.state.openNumber!==1 ? 'none' : '' }}>{skill}</div>\n          <div style={{display:this.state.openNumber!==2 ? 'none' : '' }}>{about}</div>\n          <div>{home}</div>\n          <div style={{display:this.state.openNumber!==0 ? 'none' : '' }}>{skill}</div>\n          <div style={{display:this.state.openNumber!==0 ? 'none' : '' }}>{about}</div>\n          \n        </div>\n        <BrowserRouter>\n            <div className=\"links\">\n            <FontAwesomeIcon icon={['fab', 'apple']} />\n            <FontAwesomeIcon icon={['fab', 'microsoft']} />\n            <FontAwesomeIcon icon={['fab', 'google']} />\n            <a className=\"btn github links\" href=\"https://github.com/fish0504\"><FontAwesomeIcon icon=\"check-square\" />github</a>\n            <a className=\"btn twitter links\" href=\"https://twitter.com/fish0504_\">Twitter</a>\n            <a className=\"btn AtCoder links\" href=\"https://atcoder.jp/users/fish0504\">AtCoder</a>\n            </div>\n        </BrowserRouter>\n      </div>\n\n    );\n  }\n\n}\n//\n//<Link to=\"https://twitter.com/fish0504_\"><button className=\"btn twitter links\">Twitter</button></Link>\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './stylesheet.css'\nimport App from './components/App';\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}